package project.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import project.util.Animator;

/**
 * An example to model for a simple visualization. The model contains roads
 * organized in a matrix. See {@link #Model(AnimatorBuilder, int, int)}.
 */
public class Model extends Observable {
	private List<Agent> _agents;
	private Animator _animator;
	private boolean _disposed;
	private double _time;

	/**
	 * Creates a model to be visualized using the <code>builder</code>. If the
	 * builder is null, no visualization is performed. The number of
	 * <code>rows</code> and <code>columns</code> indicate the number of
	 * {@link Light}s, organized as a 2D matrix. These are separated and
	 * surrounded by horizontal and vertical {@link Road}s. For example, calling
	 * the constructor with 1 row and 2 columns generates a model of the form:
	 * 
	 * <pre>
	 *     |  |
	 *   --@--@--
	 *     |  |
	 * </pre>
	 * 
	 * where <code>@</code> is a {@link Light}, <code>|</code> is a vertical
	 * {@link Road} and <code>--</code> is a horizontal {@link Road}. Each road
	 * has one {@link Car}.
	 * 
	 * <p>
	 * The {@link AnimatorBuilder} is used to set up an {@link Animator}.
	 * {@link AnimatorBuilder#getAnimator()} is registered as an observer of this
	 * model.
	 * <p>
	 */
	  public Model(AnimatorBuilder builder) {
	    if (builder == null) {
	      builder = new NullAnimatorBuilder();
	    }
	    _agents = new ArrayList<>();
	    setup(builder);
	    _animator = builder.getAnimator();
	    super.addObserver(_animator);
	  }

	/**
	 * Run the simulation for <code>duration</code> model seconds.
	 */
	  public void run(int duration)
	  {
	    if (_disposed)
	      throw new IllegalStateException();
	    for (int i = 0; i < duration; i++) {
	      _time += 1.0D;
	      Agent[] agents_copy = (Agent[])_agents.toArray(new Agent[0]);
	      for (Agent a : agents_copy) {
	        a.run(_time);
	      }
	      super.setChanged();
	      super.notifyObservers();
	    }
	  }

	/**
	 * Throw away this model.
	 */
	public void dispose() {
		_animator.dispose();
		_disposed = true;
	}
	
	public List<Agent> getAgents() {
		return _agents;
	}

	/**
	 * Construct the model, establishing correspondences with the visualizer.
	 */
	private void setup(AnimatorBuilder builder)
	  {
	    int rows = MP.getRows();
	    int columns = MP.getColumns();

	    Intersection[][] intersection = new Intersection[rows][columns];

	    for (int i = 0; i < rows; i++) {
	      for (int j = 0; j < columns; j++) {
	        intersection[i][j] = new Intersection();
	        builder.addLight(intersection[i][j].getEWLight(), i, j);
	        _agents.add(intersection[i][j]);
	      }

	    }
	    GridFactory.newInstance(MP.isAlternating, this, (ArrayList)_agents, intersection, builder);
	  }

	  public double getTime() {
	    return _time;
	  }
	}