package project.model;

import java.util.ArrayList;
import java.util.List;

public class Light implements CarHandler {
  private LightColor _lightColor;
  private double length;
  private int xposition;
  private int yposition;
  private boolean trafficDirection;
  private CarHandlerList observer;
  private boolean _state;
  private Queue<Car> carQueue = new Queue<>();
  private List<Car> _cars = new ArrayList<>();

  Light(double l) { length = l; }

  public void run(double time, boolean ewLightState, LightColor ewLightColor) {
    if (!carQueue.isEmpty()) {
      moveWaitingCarsAcross();
    }
    _state = ewLightState;
    _lightColor = ewLightColor;
  }

  public boolean getState()
  {
    return _state;
  }

  public void accept(Car d)
  {
    Model model = observer.getObserver();

    d.addObserver(this);
    _cars.add(d);
    model.getAgents().remove(d);
    carQueue.enqueue(d);

    moveWaitingCarsAcross();
  }

  private void moveWaitingCarsAcross() {
    Model model = observer.getObserver();

    List<Car> nextRoadTraffic = observer.getNext(this).getCars();

    if (!nextRoadTraffic.isEmpty())
    {
      Car nextCar = (Car)nextRoadTraffic.get(nextRoadTraffic.size() - 1);

      double distance = nextCar.getPosition() - nextCar.getCarLength();

      if (distance > MP.maxCarLength)
      {
        _cars.remove(carQueue.peek());
        model.getAgents().add(carQueue.peek());
        observer.getNext(this).accept((Car)carQueue.dequeue());
      }

    }
    else
    {
      _cars.remove(carQueue.peek());
      model.getAgents().add(carQueue.peek());
      observer.getNext(this).accept((Car)carQueue.dequeue());
    }
  }

  public LightColor getColor()
  {
    return _lightColor;
  }

  public void addObserver(CarHandlerList carhandlerlist)
  {
    observer = carhandlerlist;
  }

  public List<Car> getCars()
  {
    return _cars;
  }

  public boolean getDirect() {
    return trafficDirection;
  }

  public double getDistancetoNextObstacle(Car car)
  {
    if ((_cars.size() > 1) && (_cars.indexOf(car) != 0))
    {
      Car comparingCar = (Car)_cars.get(_cars.indexOf(car) - 1);

      return comparingCar.getPosition() - car.getPosition() - car.getCarLength();
    }

    if (!observer.getNext(this).getCars().isEmpty()) {
      return ((Car)observer.getNext(this).getCars().get(0)).getPosition() + MP.roadLength - car.getPosition() - car.getCarLength();
    }
    return car.getBreakDistance() + 0.1D;
  }
  public CarHandlerList getObservingCarHandlerList() {
    return observer;
  }

  public int getXPos() {
    return xposition;
  }

  public int getYPos() {
    return yposition;
  }

  public int horCompareTo(CarHandler that) {
    if (xposition < that.getXPos()) {
      return -1;
    }
    if (xposition > that.getXPos()) {
      return 1;
    }
    return 0;
  }

  public void remove(Car d) {
    if (d == null) throw new IllegalArgumentException();
    _cars.remove(d);
    d.removeObserver();
  }

  public void removeObserver() {
    observer = null;
  }

  public int vertCompareTo(CarHandler that)
  {
    if (yposition < that.getYPos()) {
      return -1;
    }
    if (yposition > that.getYPos()) {
      return 1;
    }
    return 0;
  }

  public double getLength() {
    return length;
  }
}