package project.model.swing;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import project.model.AnimatorBuilder;
import project.model.Car;
import project.model.Light;
import project.model.LightColor;
import project.model.MP;
import project.model.Road;
import project.util.Animator;
import project.util.SwingAnimator;
import project.util.SwingAnimatorPainter;

public class SwingAnimatorBuilder implements AnimatorBuilder {
  MyPainter _painter;
  private static double skipInit = VP.gap;
  private static double skipRoad = VP.gap + MP.roadDrawLength;
  private static double skipCar = VP.gap + VP.elementWidth;
  private static double skipRoadCar = skipRoad + skipCar;

  public SwingAnimatorBuilder() {
    _painter = new MyPainter();
  }
  
  public Animator getAnimator() {
    if (_painter == null) throw new IllegalStateException();
    Animator returnValue = new SwingAnimator(_painter, "Traffic Simulator", VP.displayWidth, VP.displayHeight, VP.displayDelay);

    _painter = null;
    return returnValue;
  }

  public void addLight(Light d, int i, int j)
  {
    double x = skipInit + skipRoad + j * skipRoadCar;
    double y = skipInit + skipRoad + i * skipRoadCar;
    Translator t = new TranslatorWE(x, y, MP.carLength, VP.elementWidth, VP.scaleFactor);
    _painter.addLight(d, t);
  }
  public void addHorizontalRoad(Road l, int i, int j, boolean eastToWest) {
    double x = skipInit + j * skipRoadCar;
    double y = skipInit + skipRoad + i * skipRoadCar;
    Translator t = eastToWest ? new TranslatorEW(x, y, MP.roadDrawLength, VP.elementWidth, VP.scaleFactor) : new TranslatorWE(x, y, MP.roadDrawLength, VP.elementWidth, VP.scaleFactor);

    _painter.addRoad(l, t);
  }
  public void addVerticalRoad(Road l, int i, int j, boolean southToNorth) {
    double x = skipInit + skipRoad + j * skipRoadCar;
    double y = skipInit + i * skipRoadCar;
    Translator t = southToNorth ? new TranslatorSN(x, y, MP.roadDrawLength, VP.elementWidth, VP.scaleFactor) : new TranslatorNS(x, y, MP.roadDrawLength, VP.elementWidth, VP.scaleFactor);

    _painter.addRoad(l, t);
  }

  private static class MyPainter
    implements SwingAnimatorPainter
  {
    private List<Element<Road>> _roadElements;
    private List<Element<Light>> _lightElements;

    MyPainter() {
      _roadElements = new ArrayList<>();
      _lightElements = new ArrayList<>();
    }
    
    void addLight(Light x, Translator t) {
      _lightElements.add(new Element<Light>(x, t));
    }
    
    void addRoad(Road x, Translator t) {
      _roadElements.add(new Element<Road>(x, t));
    }

    public void paint(Graphics g) {
      for (Element<?> e : _lightElements) {
        if (((Light)e.x).getColor() == LightColor.GREEN) {
          g.setColor(Color.GREEN);
        }
        else if (((Light)e.x).getColor() == LightColor.YELLOW) {
          g.setColor(Color.YELLOW);
        }
        else {
          g.setColor(Color.RED);
        }

        XGraphics.fillOval(g, e.t, 0.0D, 0.0D, MP.carLength, VP.elementWidth);
      }
      g.setColor(Color.BLACK);
      for (Element<?> e : _roadElements) {
        XGraphics.fillRect(g, e.t, 0.0D, 0.0D, MP.roadDrawLength, VP.elementWidth);
      }

      for (Element e : _roadElements)
      {
        for (Car d : (Car[])((Road)e.x).getCars().toArray(new Car[0])) {
          g.setColor(d.getColor());
          XGraphics.fillOval(g, e.t, d.getPosition() / (d.getOberver().getLength() / MP.roadDrawLength), 0.0D, d.getCarLength() / (d.getOberver().getLength() / MP.roadDrawLength), VP.elementWidth);
        }
      }
    }

    private static class Element<T> {
      T x;
      Translator t;

      Element(T x, Translator t) {
        this.x = x;
        this.t = t;
      }
    }
  }
}